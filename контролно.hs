-- –ó–∞–¥–∞—á–∏ –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ –ø—ä—Ä–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–Ω–æ –ø–æ –§–ü,
-- —Å–ø–µ—Ü–∏–∞–ª–Ω–æ—Å—Ç ‚Äû–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∏ —Å–∏—Å—Ç–µ–º–∏‚Äú

-- –ó–∞–¥–∞—á–∞ 1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Å–ª–æ –µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —á–∏—Å–ª–æ, –∫–æ–µ—Ç–æ —Å–µ –¥–µ–ª–∏ –±–µ–∑ –æ—Å—Ç–∞—Ç—ä–∫ –Ω–∞ —Å—É–º–∞—Ç–∞ –Ω–∞ —Å–≤–æ–∏—Ç–µ
-- —Ü–∏—Ñ—Ä–∏. –ù–∞–ø—Ä–∏–º–µ—Ä —á–∏—Å–ª–æ—Ç–æ 410 –µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ç—ä–π –∫–∞—Ç–æ 4 + 1 + 0 = 5 –µ –¥–µ–ª–∏—Ç–µ–ª –Ω–∞ 410. –ù–∞–ø–∏—à–µ—Ç–µ
-- —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —á–∏—Å–ª–æ n –µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.

-- –ó–∞–¥–∞—á–∞ 2. –ù–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ –∫–∞—Ç–æ —Ä–µ–∑—É–ª—Ç–∞—Ç —Å—É–º–∞—Ç–∞ –æ—Ç —Ü–µ–ª–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
-- [a,b] (a –∏ b —Å–∞ –¥–≤–µ –¥–∞–¥–µ–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–∏ —á–∏—Å–ª–∞, a<=b), –∫–æ–∏—Ç–æ —Å–∞ –æ—Ç –≤–∏–¥–∞ 4k+1 (k –µ —Ü—è–ª–æ —á–∏—Å–ª–æ) –∏ –≤
-- –¥–µ—Å–µ—Ç–∏—á–Ω–∏—è –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–∏—Ç–æ —Å–µ —Å—ä–¥—ä—Ä–∂–∞ —Ü–∏—Ñ—Ä–∞—Ç–∞ 6.

-- –ó–∞–¥–∞—á–∞ 3. –ù–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –∑–∞ –¥–∞–¥–µ–Ω —Å–ø–∏—Å—ä–∫ l, –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –∫–æ–π—Ç–æ —Å–∞ –Ω–µ–ø—Ä–∞–∑–Ω–∏
-- —Å–ø–∏—Å—ä—Ü–∏ –æ—Ç —á–∏—Å–ª–∞, –≤—Ä—ä—â–∞ –∫–∞—Ç–æ —Ä–µ–∑—É–ª—Ç–∞—Ç —Å–ø–∏—Å—ä–∫ –æ—Ç —Ç–µ–∑–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ l, –∫–æ–∏—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞—Ç
-- –∞—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∏—è (—á–∏—Å–ª–æ–≤–∞ —Ä–µ–¥–∏—Ü–∞, –≤ –∫–æ—è—Ç–æ –≤—Å—è–∫–æ —á–∏—Å–ª–æ —Å–ª–µ–¥ –ø—ä—Ä–≤–æ—Ç–æ —Å–µ –ø–æ–ª—É—á–∞–≤–∞, –∫–∞—Ç–æ
-- –∫—ä–º –ø—Ä–µ–¥–∏—à–Ω–æ—Ç–æ —Å–µ –ø—Ä–∏–±–∞–≤—è –µ–¥–Ω–∞ –∏ —Å—ä—â–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞).

-- –ó–∞–¥–∞—á–∞ 4. –î–µ—Ñ–∏–Ω–∏—Ä–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ sin n x, –∫–æ—è—Ç–æ –ø—Ä–∏–µ–º–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç n –∏ —Ä–µ–∞–ª–Ω–æ—Ç–æ
-- —á–∏—Å–ª–æ x –∏ –≤—Ä—ä—â–∞ n-—Ç–∞—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–∞ —Å—É–º–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ—Ç–æ –≤ —Å—Ç–µ–ø–µ–Ω–µ–Ω —Ä–µ–¥ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ sin(x),
-- –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–æ –∫–∞—Ç–æ:
-- ùë†ùëñùëõ(ùë•) = ‚àë(‚àí1)ùëñùë•2ùëñ+1(2ùëñ + 1)!‚àûùëñ=0= ùë• ‚àíùë•33!+ùë•55!‚àíùë•77!+. ..

-- –ó–∞–¥–∞—á–∞ 5. –ù–µ–∫–∞ —Å–∞ –¥–∞–¥–µ–Ω–∏ –¥–≤–µ –µ–¥–Ω–æ–∞—Ä–≥—É–º–µ–Ω—Ç–Ω–∏ —á–∏—Å–ª–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ f –∏ g –∏ —Å–ø–∏—Å—ä–∫ –æ—Ç —á–∏—Å–ª–µ–Ω–∏
-- —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ xs. –©–µ –∫–∞–∑–≤–∞–º–µ, —á–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ f –¥–æ–º–∏–Ω–∏—Ä–∞ g –≤—ä—Ä—Ö—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ—Ç–æ xs, –∞–∫–æ –∑–∞ –≤—Å—è–∫–æ x ‚àà xs
-- –µ –≤—è—Ä–Ω–æ, —á–µ |f(x)| ‚â• |g(x)|.
-- –î–µ—Ñ–∏–Ω–∏—Ä–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ dominates f g xs, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –¥–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
-- f –¥–æ–º–∏–Ω–∏—Ä–∞ g –≤—ä—Ä—Ö—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ—Ç–æ xs.

-- –ó–∞–¥–∞—á–∞ 6. –ù–µ–∫–∞ —Å–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ:
-- type Student = String -- –∏–º–µ –Ω–∞ —É—á–µ–Ω–∏–∫
-- type Subject = String -- –∏–º–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
-- type Note = Double -- –æ—Ü–µ–Ω–∫–∞
-- -- –ó–∞–ø–∏—Å –∑–∞ —É—á–µ–Ω–∏–∫, —Å—ä–¥—ä—Ä–∂–∞—â –∏–º–µ –Ω–∞ —É—á–µ–Ω–∏–∫, —É—á–µ–±–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –∏ –æ—Ü–µ–Ω–∫–∞—Ç–∞ –Ω–∞
-- -- —É—á–µ–Ω–∏–∫–∞ –ø–æ –¥–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç.
-- type Record = (Student, Subject, Note)
-- –î–µ—Ñ–∏–Ω–∏—Ä–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ hardestSubject :: [Record] -> Subject, –∫–æ—è—Ç–æ –ø–æ–ª—É—á–∞–≤–∞ —Å–ø–∏—Å—ä–∫ –æ—Ç –∑–∞–ø–∏—Å–∏
-- –∑–∞ —É—á–µ–Ω–∏—Ü–∏—Ç–µ –æ—Ç –¥–∞–¥–µ–Ω –∫–ª–∞—Å –∏ –≤—Ä—ä—â–∞ –∏–º–µ—Ç–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–π-–Ω–∏—Å–∫–∞ —Å—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–æ–∑–∏ —Å–ª–∞—Å.

-- –ó–∞–¥–∞—á–∞ 7. –ù–∞–ø–∏—à–µ—Ç–µ –Ω–∞ –µ–∑–∏–∫–∞ Haskell —Ñ—É–Ω–∫—Ü–∏—è reverseOrdSuff :: Int -> Int, –∫–æ—è—Ç–æ –ø–æ –¥–∞–¥–µ–Ω–æ
-- –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —á–∏—Å–ª–æ k –Ω–∞–º–∏—Ä–∞ —á–∏—Å–ª–æ, –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç —Ü–∏—Ñ—Ä–∏—Ç–µ –Ω–∞ –Ω–∞–π-–¥—ä–ª–≥–∏—è —Å—Ç—Ä–æ–≥–æ –Ω–∏–∑—Ö–æ–¥—è—â —Å—É—Ñ–∏–∫—Å
-- –Ω–∞ k, –≤–∑–µ—Ç–∏ –≤ –æ–±—Ä–∞—Ç–µ–Ω —Ä–µ–¥.
-- –ü—Ä–∏–º–µ—Ä–∏:
-- reverseOrdSuff 37563 ‚Üí 36
-- reverseOrdSuff 32763 ‚Üí 367
-- reverseOrdSuff 32567 ‚Üí 7
-- reverseOrdSuff 32666 ‚Üí 6

-- –ó–∞–¥–∞—á–∞ 8. –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –Ω–∞ Haskell —Ñ—É–Ω–∫—Ü–∏—è sumUnique :: [[Int]] -> Int, –∫–æ—è—Ç–æ –ø–æ —Å–ø–∏—Å—ä–∫ –æ—Ç
-- —Å–ø–∏—Å—ä—Ü–∏ –æ—Ç —Ü–µ–ª–∏ —á–∏—Å–ª–∞ –Ω–∞–º–∏—Ä–∞ —Å—É–º–∞—Ç–∞ –Ω–∞ —Ç–µ–∑–∏ –æ—Ç —á–∏—Å–ª–∞—Ç–∞, –∫–æ–∏—Ç–æ —Å–∞ —É–Ω–∏–∫–∞–ª–Ω–∏ –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞
-- —Å–ø–∏—Å—ä–∫–∞, –≤ –∫–æ–π—Ç–æ —Å–µ —Å—Ä–µ—â–∞—Ç.
-- –ü—Ä–∏–º–µ—Ä–∏:
-- sumUnique [[1,2,3,2],[-4,-4],[5]] ‚Üí 9 (= 1+3+5)
-- sumUnique [[2,2,2],[3,3,3],[4,4,4]] ‚Üí 0
-- sumUnique [[1,2,3],[4,5,6],[7,8,9]] ‚Üí 45

-- –ó–∞–¥–∞—á–∞ 9. –ü—Ä–æ–¥—É–∫—Ç —Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—è —Å –Ω–∞—Ä–µ–¥–µ–Ω–∞ –¥–≤–æ–π–∫–∞ –æ—Ç –≤–∏–¥–∞ (–∏–º–µ, —Ü–µ–Ω–∞). –ù–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –≤ –¥–∞–¥–µ–Ω
-- –º–∞–≥–∞–∑–∏–Ω —Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—è —Å—ä—Å —Å–ø–∏—Å—ä–∫ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏.
-- type Product = (String,Double)
-- type StoreAvailability = [Product]
-- –∞) –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –Ω–∞ Haskell —Ñ—É–Ω–∫—Ü–∏—è
-- closestToAverage :: StoreAvailability -> String, –∫–æ—è—Ç–æ –Ω–∞–º–∏—Ä–∞ –∏–º–µ—Ç–æ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —á–∏—è—Ç–æ —Ü–µ–Ω–∞ –µ
-- –Ω–∞–π-–±–ª–∏–∑–∫–∞ –¥–æ —Å—Ä–µ–¥–Ω–∞—Ç–∞ —Ü–µ–Ω–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏. –ê–∫–æ –∏–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç –µ–¥–∏–Ω —Ç–∞–∫—ä–≤ –ø—Ä–æ–¥—É–∫—Ç,
-- —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –¥–∞ –≤—Ä—ä—â–∞ –∏–º–µ—Ç–æ –Ω–∞ –∫–æ–π –¥–∞ –µ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ.
-- –±) –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –Ω–∞ Haskell —Ñ—É–Ω–∫—Ü–∏—è
-- cheaperAlternative :: StoreAvailability -> Int, –∫–æ—è—Ç–æ –Ω–∞–º–∏—Ä–∞ –±—Ä–æ—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ, –∑–∞ –∫–æ–∏—Ç–æ –∏–º–∞
-- –ø—Ä–æ–¥—É–∫—Ç —Å—ä—Å —Å—ä—â–æ—Ç–æ –∏–º–µ, –Ω–æ –ø–æ-–Ω–∏—Å–∫–∞ —Ü–µ–Ω–∞.
-- –ü—Ä–∏–º–µ—Ä–∏:
-- store1=[("bread",1),("milk",2.5),("lamb",10),("cheese",5),("butter",2.3)]
-- closestToAverage store1 ‚Üí "cheese"
-- store2=[("bread",1),("cheese",2.5),("bread",1),("cheese",5),("butter",2.3)]
-- cheaperAlternative store2 ‚Üí 1

-- –ó–∞–¥–∞—á–∞ 10. –ù–µ–∫–∞ –µ –¥–∞–¥–µ–Ω —Å–ø–∏—Å—ä–∫ –æ—Ç —Ç–æ—á–∫–∏ –≤ —Ç—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–µ–Ω–∏ –∫–∞—Ç–æ –Ω–∞—Ä–µ–¥–µ–Ω–∏
-- —Ç—Ä–æ–π–∫–∏. –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –Ω–∞ Haskell —Ñ—É–Ω–∫—Ü–∏—è
-- minDistance :: [(Double,Double,Double)] -> Double, –∫–æ—è—Ç–æ –Ω–∞–º–∏—Ä–∞ –Ω–∞–π-–º–∞–ª–∫–æ—Ç–æ –æ—Ç —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞
-- –º–µ–∂–¥—É –¥–≤–æ–π–∫–∏—Ç–µ —Ç–æ—á–∫–∏ –æ—Ç —Å–ø–∏—Å—ä–∫–∞.
-- –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ d —Å–µ –¥e—Ñ–∏–Ω–∏—Ä–∞ –ø–æ —Å–ª–µ–¥–Ω–∏—è –Ω–∞—á–∏–Ω: –∞–∫–æ —Ä–∞–∑–≥–ª–µ–∂–¥–∞–º–µ —Ç–æ—á–∫–∏—Ç–µ p1=(x1, y1, z1) –∏
-- p2=(x2, y2, z2), —Ç–æ d(p1, p2) = (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2).

main :: IO()
main = do

    -- --task1
    -- print(interest_number 410)
    -- --task2
    -- print(consistSix1 163)
    -- print(consistSix1 155)
    -- --task3
    -- print(progressions [[1,2,3,2],[-4,-4],[5]])
    -- print(progressions [[1,2,3,4],[6],[8]])
    -- --task4
    -- print(sinus 5 5)
    -- --task7
    -- print(reverseOrdSuff 37563) --36
    -- print(reverseOrdSuff 32763) --367
    -- print(reverseOrdSuff 32567) --7
    -- --task8
    -- print(sumUnique [[1,2,3,2],[-4,-4],[5]]) --9
    -- print(sumUnique [[2,2,2],[3,3,3],[4,4,4]]) --0
    -- print(sumUnique [[1,2,3],[4,5,6],[7,8,9]]) --45
    --task9
    print(closestToAverage store1) -- ‚Üí "cheese"
    --print(cheaperAlternative store2) -- ‚Üí 1
    --print(getAverageprice store2)

-- --task1
-- interest_number :: Int -> Int
-- interest_number num = (num/(helper num 1 0))
--     where
--         helper number up sum
--             | number == 0 = sum
--             | otherwise   = helper (number/up) (up + 10) (sum + (number%(up*10))

-- --task2
-- consistSix1 :: Int -> Bool
-- consistSix1 n
--     | n == 0 = False
--     | n `mod` 6 == 0 = True
--     | otherwise = consistSix1 (n `div` 10)

-- --task3
-- progressions :: [[Int]] -> [[Int]]
-- progressions ls = [e | e <- ls, isProgression e]
--     where
--         isProgression []         = False
--         isProgression [f]        = False
--         isProgression [f,s]      = True
--         isProgression (f:s:t:es) = (f - s) == (s - t) && isProgression (s:t:es)

-- --task4

-- factoriel :: Int -> Int -> Int
-- factoriel num sum
--     | num == 0  = sum
--     | otherwise = factoriel (num - 1) (sum * (num))

-- sinus :: Int -> Int -> Int
-- sinus n x = helper1 n x 0 1
--     where
--         helper1 n x sum step
--             | n == 0    = sum
--             | otherwise = helper1 (n-1) x (sum + ((x^step) / (factoriel step 0))) (step + 2)  

-- -- rabotesht task 4

-- sin1:: Int -> Double -> Double
-- sin1 n x = sum[((-1)^i)*(x**fromIntegral(2*i+1))/fromIntegral(factoriel(2*i+1) 0) | i <- [1, 3 .. n]]

-- --task5
-- dominates :: (Int -> Int) -> (Int -> Int) -> [Int] -> Bool
-- dominates f g []     = True
-- dominates f g (x:xs) = abs (f x) >= abs (g x) && dominates f g xs

-- --task6
-- type Student = String -- –∏–º–µ –Ω–∞ —É—á–µ–Ω–∏–∫
-- type Subject = String -- –∏–º–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
-- type Note = Double -- –æ—Ü–µ–Ω–∫–∞

-- type Record = (Student, Subject, Note)

-- --hardestSubject :: [Record] -> Subject
-- --hardestSubject person = 

-- --task7
-- listToNumber :: [Int] -> Int
-- listToNumber [] = 0
-- listToNumber (d:ds) = d * (10 ^ (length ds)) + listToNumber ds

-- reverseOrdSuff :: Int -> Int
-- reverseOrdSuff num
--     | num < 10  = num
--     | otherwise = helper (num `div` 10) [num `mod` 10] 
--         where
--             helper num list@(d:ds)
--                 |num == 0                     = listToNumber list
--                 |num == 0 || num `mod` 10 < d = listToNumber (reverse list)
--                 |otherwise                    = helper (num `div` 10) ((num `mod` 10) : list)

-- --task8
-- sumUnique :: [[Int]] -> Int
-- sumUnique [] = 0
-- sumUnique (x:xs) = helper1 (x:xs) 0
--     where
--         helper1 (x:y:xs) sum 
--         | x == y    = (sum + x)
--         | otherwise = helper1 xs sum

--task9
type Product = (String,Double)
type StoreAvailability = [Product]

store1 :: StoreAvailability
store1 = [("bread",1),("milk",2.6),("lamb",10),("cheese",5),("butter",2.3)]

store2 :: StoreAvailability
store2 = [("bread",1),("cheese",2.5),("bread",1),("cheese",5),("butter",2.3)]

getAverageprice :: StoreAvailability -> Double
getAverageprice [] = 0 
getAverageprice ((products,price):xs) = price + getAverageprice xs

closestToAverage :: StoreAvailability -> String
closestToAverage [] = ""
closestToAverage p@((products,price):xs)
    | round price == round(getAverageprice p / fromIntegral (length xs)) = products
    | otherwise = closestToAverage xs

--cheaperAlternative :: StoreAvailability -> Int